"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitize = void 0;
const xss_1 = __importDefault(require("xss"));
/**
 * Sanitizes the provided data by applying XSS filtering and returning a copy of the data with all properties and values set as readonly.
 *
 * @param data The data to be sanitized.
 * @param options The options to configure the XSS filtering process.
 *
 * @returns A sanitized copy of the provided data with all properties and values set as readonly.
 */
const sanitize = (data, options) => {
    var _a, _b;
    // If data is falsy, return as is
    if (!data) {
        return data;
    }
    // If data is an array, sanitize each item in the array and return the sanitized array
    if (Array.isArray(data)) {
        const sanitizedArray = data.map((item) => (0, exports.sanitize)(item, options));
        return sanitizedArray;
    }
    // If data is an object, sanitize each property value in the object and return the sanitized object
    if (typeof data === 'object' && data !== null) {
        const sanitizedObject = {};
        // Sanitize each property value in the object
        // eslint-disable-next-line functional/no-loop-statement
        for (const [key, value] of Object.entries(data)) {
            // eslint-disable-next-line functional/immutable-data
            sanitizedObject[key] = (0, exports.sanitize)(value, options);
        }
        return sanitizedObject;
    }
    // If data is a string, apply XSS filtering and return the sanitized string
    if (typeof data === 'string') {
        const xssOptions = Object.assign({ stripIgnoreTagBody: (_a = options === null || options === void 0 ? void 0 : options.stripIgnoreTagBody) !== null && _a !== void 0 ? _a : false, whiteList: (_b = options === null || options === void 0 ? void 0 : options.whiteList) !== null && _b !== void 0 ? _b : {} }, options);
        return (0, xss_1.default)(data, xssOptions);
    }
    // If data is not an array, object, or string, return as is
    return data;
};
exports.sanitize = sanitize;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3Nhbml0aXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDhDQUFzQjtBQUd0Qjs7Ozs7OztHQU9HO0FBQ0ksTUFBTSxRQUFRLEdBQUcsQ0FDdEIsSUFBTyxFQUNQLE9BQXlCLEVBQ1gsRUFBRTs7SUFDaEIsaUNBQWlDO0lBQ2pDLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDVCxPQUFPLElBQStCLENBQUM7S0FDeEM7SUFFRCxzRkFBc0Y7SUFDdEYsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3ZCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUN2QyxJQUFBLGdCQUFRLEVBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUNHLENBQUM7UUFDN0IsT0FBTyxjQUFjLENBQUM7S0FDdkI7SUFFRCxtR0FBbUc7SUFDbkcsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtRQUM3QyxNQUFNLGVBQWUsR0FBRyxFQUF5QyxDQUFDO1FBRWxFLDZDQUE2QztRQUM3Qyx3REFBd0Q7UUFDeEQsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0MscURBQXFEO1lBQ3JELGVBQWUsQ0FBQyxHQUFjLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQzVEO1FBQ0QsT0FBTyxlQUErQixDQUFDO0tBQ3hDO0lBRUQsMkVBQTJFO0lBQzNFLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQzVCLE1BQU0sVUFBVSxtQkFDZCxrQkFBa0IsRUFBRSxNQUFBLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxrQkFBa0IsbUNBQUksS0FBSyxFQUN4RCxTQUFTLEVBQUUsTUFBQSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsU0FBUyxtQ0FBSSxFQUFFLElBQ2hDLE9BQU8sQ0FDWCxDQUFDO1FBQ0YsT0FBTyxJQUFBLGFBQUcsRUFBQyxJQUFJLEVBQUUsVUFBVSxDQUFpQixDQUFDO0tBQzlDO0lBRUQsMkRBQTJEO0lBQzNELE9BQU8sSUFBb0IsQ0FBQztBQUM5QixDQUFDLENBQUM7QUExQ1csUUFBQSxRQUFRLFlBMENuQiJ9